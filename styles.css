*,
*::before,
*::after {
  box-sizing: border-box;
}

body {
  margin: 0;
  color: #141616;
  background-color: #e6e9ea;
  font-size: 28px;
}

h1 {
  font-size: 110px;
  margin-bottom: 1rem;
}

.full-screen-section {
  height: 100vh;
  text-align: center;
  padding: 1rem;
}

.top-section .left,
.top-section .right {
  flex-basis: 0;
  flex-grow: 1;
  padding: 1rem;
  padding-left: 3rem;
}

.top-section {
  display: flex;
  text-align: start;
  padding: 0;
}

.top-section .left {
  background-color: rgb(248, 250, 249, var(--background-opacity));
}

.top-section .right {
  background: linear-gradient(
    210.65deg,
    rgb(152, 157, 157, var(--background-opacity)) 0%,
    rgb(189, 194, 194, var(--background-opacity)) 100%
  );
}

/*@media (width <= 1000px) {*/
@media (max-width: 1000px) {
  .top-section .right {
    display: none;
  }

  .top-section .left {
    text-align: center;
  }

  body {
    font-size: 24px;
  }

  h1 {
    font-size: 72px;
  }
}

/* Need to set a default value for --scroll in case the user disabled javascript. */
:root {
  --scroll: 0;
}

.top-section {
  position: sticky;
  top: 0;

  /* What we want is that we only start moving the .top-section (background) when I scroll pass, e.g. 25%,
     But I want to speed up the scrolling. so that when I scroll from 25% - 100%, the whole .top-section will be scroll up.
     e.g. it scroll in the faster speed than .first-main-section
   */

  /* (oldVal - oldMin) * newRange / oldRange + newMin
     so if we want to scroll to like 65% of the page, it will be
     var(--scroll) = 65 = oldVal;
     25 = oldMin
     100 = newRange
     75 = oldRange
     0 = newMin

     So calc(max(var(--scroll), 25) - 25) * 100 / 75) will give us the height it will be scrolling down once it pass 25%.
     and then we need to '-1% *' to get the correct direction.
  */
  translate: 0 calc(-1% * (max(var(--scroll), 25) - 25) * 100 / 75);

  /* What we want is that when the page is launch, has the original background color, meaning full opacity.
     So the original .top-section left and right background color CAN show
     e.g. background-color: rgb(248, 250, 249, var(--background-opacity));
          In rgba, when a = 1, it means use original rgb background color for .top-section

     When it gets pass the 30% mark, we want to blockage of original background color, meaning no opacity, total transparent.
     So the original .top-section left and right background color CAN NOT show
     Therefore, take the original body background color instead
     e.g. background-color: rgb(248, 250, 249, var(--background-opacity));
          In rgba, when a = 0, it means no original rgb background color for .top-section, total transparent.

     And when it scroll between 0 - 30% of the current page height, slowly remove the original .top-section background color.
   */
  --background-opacity: calc(100% - 1% * min(var(--scroll), 30) * 100 / 30);
}

/* Prefer to have the second section to come up so quickly to overlay the first section */
.first-main-section {
  padding-top: 10vh;
}

.imgs > * {
  position: fixed;
  width: 100vw; /* the image itself have space in x-axis so makes them not touching the edge of the screen */
  bottom: 0;
  z-index: 10;

  translate: 0 100%;
  transition: translate 250ms ease-in-out;
}
.imgs > .show {
  translate: 0 0;
}
.imgs > .top-section-img {
  /* (oldVal - oldMin) * newRange / oldRange + newMin
     We want our image to grow its width from 50% (starting point) to 100%, so the newRange = 50
     So --value will be 0 - 50%.
  */
  --value: min(var(--scroll), 30) * 50 / 30;
}
